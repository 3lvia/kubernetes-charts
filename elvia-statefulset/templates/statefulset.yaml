apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ required "Missing .Values.name" .Values.name }}
  namespace: {{ required "Missing .Values.namespace" .Values.namespace }}
spec:
  serviceName: {{ required "Missing .Values.name" .Values.name }}
  {{- if not .Values.replicaCount }}
  replicas: {{ required "Missing .Values.replicaCount" .Values.replicaCount }}
  {{- else if kindIs "float64" .Values.replicaCount }}
  replicas: {{ .Values.replicaCount }}
  {{- else if kindIs "map" .Values.replicaCount }}
  {{- if eq .Values.environment "dev" }}
  replicas: {{ required "Missing .Values.replicaCount.dev" .Values.replicaCount.dev }}
  {{- else if eq .Values.environment "sandbox" }}
  replicas: {{ required "Missing .Values.replicaCount.sandbox" .Values.replicaCount.sandbox }}
  {{- else if eq .Values.environment "test" }}
  replicas: {{ required "Missing .Values.replicaCount.test" .Values.replicaCount.test }}
  {{- else if eq .Values.environment "dvtest" }}
  replicas: {{ required "Missing .Values.replicaCount.dvtest" .Values.replicaCount.dvtest }}
  {{- else if eq .Values.environment "prod" }}
  replicas: {{ required "Missing .Values.replicaCount.prod" .Values.replicaCount.prod }}
  {{- end }}
  {{- else }}
  {{- fail ".Values.replicaCount must either be a number or a map" }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ required "Missing .Values.name" .Values.name }}
      microservice-type: {{ required "Missing .Values.microserviceType" .Values.microserviceType }}
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: {{ required "Missing .Values.name" .Values.name }}
      labels:
        app: {{ required "Missing .Values.name" .Values.name }}
        microservice-type: {{ required "Missing .Values.microserviceType" .Values.microserviceType }}
        azure.workload.identity/use: "true"
    spec:
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end}}
      serviceAccountName: {{ required "Missing .Values.name" .Values.name }}
      imagePullSecrets:
      {{- if .Values.imagePullSecret }}
      - name: {{ .Values.imagePullSecret }}
      {{- else }}
      - name: containerregistryelvia
      {{- end}}
      securityContext:
        seccompProfile:
          type: RuntimeDefault
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        supplementalGroups: [1001]
      volumes:
      - emptyDir: {}
        name: tmp
      containers:
      - name: {{ required "Missing .Values.name" .Values.name }}
        {{- if .Values.envFrom}}
        envFrom:
        {{- range $envFromKey, $envFromValue := .Values.envFrom }}
        - configMapRef:
            name: {{ required "Missing $envFromValue.name" $envFromValue.name }}
        {{- end }}
        {{- end }}
        env:
        - name: ELVIA_APPLICATION_NAMESPACE
          value: {{ required "Missing .Values.namespace" .Values.namespace }}
        - name: ELVIA_APPLICATION_NAME
          value: {{ required "Missing .Values.namespace" .Values.name }}
        {{- with .Values.env }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        image: {{ include "image" . }}
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        {{- if .Values.ports }}
        ports:
        {{- range $portsKey, $portsValue := .Values.ports }}
          - name: {{ required "Missing $portsValue.name" $portsValue.name }}
            containerPort: {{ required "Missing $portsValue.containerPort" $portsValue.containerPort }}
            protocol: {{ required "Missing $portsValue.protocol" $portsValue.protocol }}
        {{- end}}
        {{- end}}
        {{- with .Values.readinessProbe }}
        readinessProbe:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.livenessProbe }}
        livenessProbe:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.startupProbe }}
        startupProbe:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        volumeMounts:
        - mountPath: /tmp
          name: tmp
      {{- if .Values.nodePool }}
      nodeSelector:
        type: {{ .Values.nodePool }}
      tolerations:
      - effect: NoSchedule
        key: type
        operator: Equal
        value: {{ .Values.nodePool }}
      {{- else}}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
