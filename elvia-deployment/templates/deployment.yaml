apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ required "Missing .Values.name" .Values.name }}
  namespace: {{ required "Missing .Values.namespace" .Values.namespace }}
spec:
  {{- if .Values.progressDeadlineSeconds }}
  progressDeadlineSeconds: {{ .Values.progressDeadlineSeconds }}
  {{- end}}
  {{- if not .Values.replicaCount }}
  replicas: {{ required "Missing .Values.replicaCount" .Values.replicaCount }}
  {{- else if kindIs "float64" .Values.replicaCount }}
  replicas: {{ .Values.replicaCount }}
  {{- else if kindIs "map" .Values.replicaCount }}
  {{- if eq .Values.environment "dev" }}
  replicas: {{ required "Missing .Values.replicaCount.dev" .Values.replicaCount.dev }}
  {{- else if eq .Values.environment "sandbox" }}
  replicas: {{ required "Missing .Values.replicaCount.sandbox" .Values.replicaCount.sandbox }}
  {{- else if eq .Values.environment "test" }}
  replicas: {{ required "Missing .Values.replicaCount.test" .Values.replicaCount.test }}
  {{- else if eq .Values.environment "dvtest" }}
  replicas: {{ required "Missing .Values.replicaCount.dvtest" .Values.replicaCount.dvtest }}
  {{- else if eq .Values.environment "prod" }}
  replicas: {{ required "Missing .Values.replicaCount.prod" .Values.replicaCount.prod }}
  {{- end }}
  {{- else }}
  {{- fail ".Values.replicaCount must either be a number or a map" }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ required "Missing .Values.name" .Values.name }}
      microservice-type: {{ required "Missing .Values.microserviceType" .Values.microserviceType }}
  {{- with .Values.strategy }}
  strategy:
    {{- toYaml . | nindent 4 }}
  {{- else }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      {{- if eq .Values.microserviceType "webapi" }}
      maxUnavailable: 0
      {{- else }}
      maxUnavailable: 1
      {{- end }}
    type: RollingUpdate
  {{- end }}
  template:
    metadata:
      labels:
        app: {{ required "Missing .Values.name" .Values.name }}
        microservice-type: {{ required "Missing .Values.microserviceType" .Values.microserviceType }}
    spec:
      serviceAccountName: {{ required "Missing .Values.name" .Values.name }}
      imagePullSecrets:
      {{- if .Values.imagePullSecret }}
      - name: {{ .Values.imagePullSecret }}
      {{- else }}
      - name: containerregistryelvia
      {{- end}}
      {{- if .Values.securityContext }}
      securityContext: {{- toYaml .Values.securityContext | nindent 8 }} 
      {{- else }}
      securityContext:
        seccompProfile:
          type: RuntimeDefault
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        supplementalGroups: [1001]
      {{- end }}
      {{- if .Values.dnsConfig }}
      dnsConfig: {{- toYaml .Values.dnsConfig | nindent 8 }} 
      {{- end}}
      {{- with .Values.hostAliases }}
      hostAliases: 
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- if .Values.nodePool }}
      nodeSelector:
        type: {{ .Values.nodePool }}
      tolerations:
      - effect: NoSchedule
        key: type
        operator: Equal
        value: {{ .Values.nodePool }}
      {{- else}}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
      containers:
      - name: {{ required "Missing .Values.name" .Values.name }}
        {{- if .Values.envFrom}}
        envFrom:
        {{- range $envFromKey, $envFromValue := .Values.envFrom }}
        - configMapRef:
            name: {{ required "Missing $envFromValue.name" $envFromValue.name }}
        {{- end }}
        {{- end }}
        {{- with .Values.env }}
        env:
          {{- toYaml . | nindent 8 }}
        {{- end }}
        image: {{ include "image" . }} 
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
        resources:
          {{- if eq .Values.environment "dev"}}
          {{- if .Values.resources.dev }}
          limits:
            cpu: {{ required "Missing .Values.resources.dev.limits.cpu" .Values.resources.dev.limits.cpu }}
            memory:  {{ required "Missing .Values.resources.dev.limits.memory" .Values.resources.dev.limits.memory }}
          {{- else }}
          limits:
            cpu: {{ required "Missing .Values.resources.limits.cpu" .Values.resources.limits.cpu }}
            memory:  {{ required "Missing .Values.resources.limits.memory" .Values.resources.limits.memory }}
          {{- end }}
          requests:
            cpu: {{ include "resources.limits.cpu.max50m" .}}
            memory:  {{ include "resources.limits.memory.max100Mi" .}}
          {{- end }}

          {{- if eq .Values.environment "test"}}
          {{- if .Values.resources.test }}
          limits:
            cpu: {{ required "Missing .Values.resources.test.limits.cpu" .Values.resources.test.limits.cpu }}
            memory:  {{ required "Missing .Values.resources.test.limits.memory" .Values.resources.test.limits.memory }}
          requests:
            cpu: {{ required "Missing .Values.resources.test.requests.cpu" .Values.resources.test.requests.cpu }}
            memory: {{ required "Missing .Values.resources.test.requests.memory" .Values.resources.test.requests.memory }}
          {{- else }}
          limits:
            cpu: {{ required "Missing .Values.resources.limits.cpu" .Values.resources.limits.cpu }}
            memory:  {{ required "Missing .Values.resources.limits.memory" .Values.resources.limits.memory }}
          requests:
            cpu: {{ required "Missing .Values.resources.requests.cpu" .Values.resources.requests.cpu }}
            memory: {{ required "Missing .Values.resources.requests.memory" .Values.resources.requests.memory }}
          {{- end }}
          {{- end }}

          {{- if eq .Values.environment "dvtest"}}
          {{- if .Values.resources.dvtest }}
          limits:
            cpu: {{ required "Missing .Values.resources.dvtest.limits.cpu" .Values.resources.dvtest.limits.cpu }}
            memory:  {{ required "Missing .Values.resources.dvtest.limits.memory" .Values.resources.dvtest.limits.memory }}
          requests:
            cpu: {{ required "Missing .Values.resources.dvtest.requests.cpu" .Values.resources.dvtest.requests.cpu }}
            memory: {{ required "Missing .Values.resources.dvtest.requests.memory" .Values.resources.dvtest.requests.memory }}
          {{- else }}
          limits:
            cpu: {{ required "Missing .Values.resources.limits.cpu" .Values.resources.limits.cpu }}
            memory:  {{ required "Missing .Values.resources.limits.memory" .Values.resources.limits.memory }}
          requests:
            cpu: {{ required "Missing .Values.resources.requests.cpu" .Values.resources.requests.cpu }}
            memory: {{ required "Missing .Values.resources.requests.memory" .Values.resources.requests.memory }}
          {{- end }}
          {{- end }}

          {{- if eq .Values.environment "prod"}}
          {{- if .Values.resources.prod }}
          limits:
            cpu: {{ required "Missing .Values.resources.prod.limits.cpu" .Values.resources.prod.limits.cpu }}
            memory:  {{ required "Missing .Values.resources.prod.limits.memory" .Values.resources.prod.limits.memory }}
          requests:
            cpu: {{ required "Missing .Values.resources.prod.requests.cpu" .Values.resources.prod.requests.cpu }}
            memory: {{ required "Missing .Values.resources.prod.requests.memory" .Values.resources.prod.requests.memory }}
          {{- else }}
          limits:
            cpu: {{ required "Missing .Values.resources.limits.cpu" .Values.resources.limits.cpu }}
            memory:  {{ required "Missing .Values.resources.limits.memory" .Values.resources.limits.memory }}
          requests:
            cpu: {{ required "Missing .Values.resources.requests.cpu" .Values.resources.requests.cpu }}
            memory: {{ required "Missing .Values.resources.requests.memory" .Values.resources.requests.memory }}
          {{- end }}
          {{- end }}

        {{- with .Values.lifecycle }}
        lifecycle:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.readinessProbe }}
        readinessProbe:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.livenessProbe }}
        livenessProbe:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.startupProbe }}
        startupProbe:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.volumeMounts }}
        volumeMounts:
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- if .Values.sidecars }}
      {{- range $sidecarKey, $sidecarValue := .Values.sidecars }}
      {{- $data := dict "sidecar" $sidecarValue "tag" $.Values.image.tag "namespace" $.Values.namespace}}  
      - name: {{ required "Missing $sidecarValue.name" $sidecarValue.name }}
        {{- with $.Values.env}}
        env:
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with $sidecarValue.args}}
        args:
          {{- toYaml . | nindent 8 }}
        {{- end }}
        image: {{ include "sidecar.image" $data }}  
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
        resources:
         {{- if $sidecarValue.resources}}
          {{- toYaml $sidecarValue.resources | nindent 10 }}
         {{else}}
          {{ required "Missing .sidecar.resources" $sidecarValue.resources }}
         {{end}}
        {{- end }}
      {{- end}}



